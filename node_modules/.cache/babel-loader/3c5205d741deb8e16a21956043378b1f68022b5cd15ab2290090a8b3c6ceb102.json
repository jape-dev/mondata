{"ast":null,"code":"/*\n * Copyright (c) 2023 Nango, all rights reserved.\n */\nconst prodHost = 'https://api.nango.dev';\nconst debugLogPrefix = 'NANGO DEBUG LOG: ';\nexport class AuthError extends Error {\n  type;\n  constructor(message, type) {\n    super(message);\n    this.type = type;\n  }\n}\nexport default class Nango {\n  hostBaseUrl;\n  websocketsBaseUrl;\n  status;\n  publicKey;\n  debug = false;\n  win = null;\n  width = null;\n  height = null;\n  tm = null;\n  constructor(config) {\n    config.host = config.host || prodHost; // Default to Nango Cloud.\n    config.websocketsPath = config.websocketsPath || '/'; // Default to root path.\n    this.debug = config.debug || false;\n    if (this.debug) {\n      console.log(debugLogPrefix, `Debug mode is enabled.`);\n      console.log(debugLogPrefix, `Using host: ${config.host}.`);\n    }\n    if (config.width) {\n      this.width = config.width;\n    }\n    if (config.height) {\n      this.height = config.height;\n    }\n    this.hostBaseUrl = config.host.slice(-1) === '/' ? config.host.slice(0, -1) : config.host; // Remove trailing slash.\n    this.status = AuthorizationStatus.IDLE;\n    this.publicKey = config.publicKey;\n    if (!config.publicKey) {\n      throw new AuthError('You must specify a public key (cf. documentation).', 'missingPublicKey');\n    }\n    try {\n      const baseUrl = new URL(this.hostBaseUrl);\n      // Build the websockets url based on the host url.\n      // The websockets path is considered relative to the baseUrl, and with the protocol updated\n      const websocketUrl = new URL(config.websocketsPath, baseUrl);\n      this.websocketsBaseUrl = websocketUrl.toString().replace('https://', 'wss://').replace('http://', 'ws://');\n    } catch {\n      throw new AuthError('Invalid URL provided for the Nango host.', 'invalidHostUrl');\n    }\n  }\n  /**\n   * Creates a new unauthenticated connection using the specified provider configuration key and connection ID\n   * @param providerConfigKey - The key identifying the provider configuration on Nango\n   * @param connectionId -  The ID of the connection\n   * @param connectionConfig - Optional. Additional configuration for the connection\n   * @returns A promise that resolves with the authentication result\n   */\n  async create(providerConfigKey, connectionId, connectionConfig) {\n    const url = this.hostBaseUrl + `/unauth/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!res.ok) {\n      const errorResponse = await res.json();\n      throw new AuthError(errorResponse.error, errorResponse.type);\n    }\n    return res.json();\n  }\n  /**\n   * Initiates the authorization process for a connection\n   * @param providerConfigKey - The key identifying the provider configuration on Nango\n   * @param connectionId - The ID of the connection for which to authorize\n   * @param options - Optional. Additional options for authorization\n   * @returns A promise that resolves with the authorization result\n   */\n  auth(providerConfigKey, connectionId, options) {\n    if (options && 'credentials' in options && (!('oauth_client_id_override' in options.credentials) || !('oauth_client_secret_override' in options.credentials)) && Object.keys(options.credentials).length > 0) {\n      const credentials = options.credentials;\n      const {\n        credentials: _,\n        ...connectionConfig\n      } = options;\n      return this.customAuth(providerConfigKey, connectionId, this.convertCredentialsToConfig(credentials), connectionConfig);\n    }\n    const url = this.hostBaseUrl + `/oauth/connect/${providerConfigKey}${this.toQueryString(connectionId, options)}`;\n    try {\n      new URL(url);\n    } catch {\n      throw new AuthError('Invalid URL provided for the Nango host.', 'invalidHostUrl');\n    }\n    return new Promise((resolve, reject) => {\n      const successHandler = (providerConfigKey, connectionId, isPending = false) => {\n        if (this.status !== AuthorizationStatus.BUSY) {\n          return;\n        }\n        this.status = AuthorizationStatus.DONE;\n        return resolve({\n          providerConfigKey: providerConfigKey,\n          connectionId: connectionId,\n          isPending\n        });\n      };\n      const errorHandler = (errorType, errorDesc) => {\n        if (this.status !== AuthorizationStatus.BUSY) {\n          return;\n        }\n        this.status = AuthorizationStatus.DONE;\n        const error = new AuthError(errorDesc, errorType);\n        return reject(error);\n      };\n      if (this.status === AuthorizationStatus.BUSY) {\n        const error = new AuthError('The authorization window is already opened', 'windowIsOppened');\n        reject(error);\n      }\n      // Save authorization status (for handler)\n      this.status = AuthorizationStatus.BUSY;\n      // Open authorization modal\n      this.win = new AuthorizationModal(this.websocketsBaseUrl, url, successHandler, errorHandler, {\n        width: this.width,\n        height: this.height\n      }, this.debug);\n      if (options?.detectClosedAuthWindow || false) {\n        this.tm = setInterval(() => {\n          if (!this.win?.modal.window || this.win.modal.window.closed) {\n            if (this.win?.isProcessingMessage === true) {\n              // Modal is still processing a web socket message from the server\n              // We ignore the window being closed for now\n              return;\n            }\n            clearTimeout(this.tm);\n            this.win = null;\n            this.status = AuthorizationStatus.CANCELED;\n            const error = new AuthError('The authorization window was closed before the authorization flow was completed', 'windowClosed');\n            reject(error);\n          }\n        }, 500);\n      }\n    });\n  }\n  /**\n   * Converts the provided credentials to a Connection configuration object\n   * @param credentials - The credentials to convert\n   * @returns The connection configuration object\n   */\n  convertCredentialsToConfig(credentials) {\n    const params = {};\n    if ('username' in credentials) {\n      params['username'] = credentials.username || '';\n    }\n    if ('password' in credentials) {\n      params['password'] = credentials.password || '';\n    }\n    if ('apiKey' in credentials) {\n      params['apiKey'] = credentials.apiKey || '';\n    }\n    if ('privateKeyId' in credentials && 'issuerId' in credentials && 'privateKey' in credentials) {\n      const appStoreCredentials = {\n        params: {\n          privateKeyId: credentials.privateKeyId,\n          issuerId: credentials.issuerId,\n          privateKey: credentials.privateKey\n        }\n      };\n      if (credentials.scope) {\n        appStoreCredentials.params['scope'] = credentials.scope;\n      }\n      return appStoreCredentials;\n    }\n    if ('client_id' in credentials && 'client_secret' in credentials) {\n      const oauth2CCCredentials = {\n        client_id: credentials.client_id,\n        client_secret: credentials.client_secret\n      };\n      return {\n        params: oauth2CCCredentials\n      };\n    }\n    return {\n      params\n    };\n  }\n  /**\n   * Performs authorization based on the provided credentials i.e api, basic, appstore and oauth2\n   * @param providerConfigKey - The key identifying the provider configuration on Nango\n   * @param connectionId - The ID of the connection for which to create the custom Authorization\n   * @param connectionConfigWithCredentials - The connection configuration containing the credentials\n   * @param connectionConfig - Optional. Additional connection configuration\n   * @returns A promise that resolves with the authorization result\n   */\n  async customAuth(providerConfigKey, connectionId, connectionConfigWithCredentials, connectionConfig) {\n    const {\n      params: credentials\n    } = connectionConfigWithCredentials;\n    if (!credentials) {\n      throw new AuthError('You must specify credentials.', 'missingCredentials');\n    }\n    if ('apiKey' in credentials) {\n      const apiKeyCredential = credentials;\n      const url = this.hostBaseUrl + `/api-auth/api-key/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(apiKeyCredential)\n      });\n      if (!res.ok) {\n        const errorResponse = await res.json();\n        throw new AuthError(errorResponse.error, errorResponse.type);\n      }\n      return res.json();\n    }\n    if ('username' in credentials || 'password' in credentials) {\n      const basicCredentials = credentials;\n      const url = this.hostBaseUrl + `/api-auth/basic/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(basicCredentials)\n      });\n      if (!res.ok) {\n        const errorResponse = await res.json();\n        throw new AuthError(errorResponse.error, errorResponse.type);\n      }\n      return res.json();\n    }\n    if ('privateKeyId' in credentials && 'issuerId' in credentials && 'privateKey' in credentials) {\n      const appCredentials = credentials;\n      const url = this.hostBaseUrl + `/app-store-auth/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(appCredentials)\n      });\n      if (!res.ok) {\n        const errorResponse = await res.json();\n        throw new AuthError(errorResponse.error, errorResponse.type);\n      }\n      return res.json();\n    }\n    if ('client_id' in credentials && 'client_secret' in credentials) {\n      const oauthCredentials = credentials;\n      const url = this.hostBaseUrl + `/oauth2/auth/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(oauthCredentials)\n      });\n      if (!res.ok) {\n        const errorResponse = await res.json();\n        throw new AuthError(errorResponse.error, errorResponse.type);\n      }\n      return res.json();\n    }\n    return Promise.reject(new Error('Something went wrong with the authorization'));\n  }\n  /**\n   * Converts the connection ID and configuration parameters into a query string\n   * @param connectionId - The ID of the connection for which to generate a query string\n   * @param connectionConfig - Optional. Additional configuration for the connection\n   * @returns The generated query string\n   */\n  toQueryString(connectionId, connectionConfig) {\n    const query = [];\n    if (connectionId) {\n      query.push(`connection_id=${connectionId}`);\n    }\n    query.push(`public_key=${this.publicKey}`);\n    if (connectionConfig) {\n      for (const param in connectionConfig.params) {\n        const val = connectionConfig.params[param];\n        if (typeof val === 'string') {\n          query.push(`params[${param}]=${val}`);\n        }\n      }\n      if (connectionConfig.hmac) {\n        query.push(`hmac=${connectionConfig.hmac}`);\n      }\n      if (connectionConfig.user_scope) {\n        query.push(`user_scope=${connectionConfig.user_scope.join(',')}`);\n      }\n      if (connectionConfig.credentials) {\n        const credentials = connectionConfig.credentials;\n        if ('oauth_client_id_override' in credentials) {\n          query.push(`credentials[oauth_client_id_override]=${encodeURIComponent(credentials.oauth_client_id_override)}`);\n        }\n        if ('oauth_client_secret_override' in credentials) {\n          query.push(`credentials[oauth_client_secret_override]=${encodeURIComponent(credentials.oauth_client_secret_override)}`);\n        }\n      }\n      for (const param in connectionConfig.authorization_params) {\n        const val = connectionConfig.authorization_params[param];\n        if (typeof val === 'string') {\n          query.push(`authorization_params[${param}]=${val}`);\n        } else if (val === undefined) {\n          query.push(`authorization_params[${param}]=undefined`);\n        }\n      }\n    }\n    return query.length === 0 ? '' : '?' + query.join('&');\n  }\n}\nvar AuthorizationStatus;\n(function (AuthorizationStatus) {\n  AuthorizationStatus[AuthorizationStatus[\"IDLE\"] = 0] = \"IDLE\";\n  AuthorizationStatus[AuthorizationStatus[\"BUSY\"] = 1] = \"BUSY\";\n  AuthorizationStatus[AuthorizationStatus[\"CANCELED\"] = 2] = \"CANCELED\";\n  AuthorizationStatus[AuthorizationStatus[\"DONE\"] = 3] = \"DONE\";\n})(AuthorizationStatus || (AuthorizationStatus = {}));\n/**\n * AuthorizationModal class\n */\nclass AuthorizationModal {\n  url;\n  features;\n  width = 500;\n  height = 600;\n  modal;\n  swClient;\n  debug;\n  isProcessingMessage = false;\n  constructor(webSocketUrl, url, successHandler, errorHandler, {\n    width,\n    height\n  }, debug) {\n    // Window modal URL\n    this.url = url;\n    this.debug = debug || false;\n    const {\n      left,\n      top,\n      computedWidth,\n      computedHeight\n    } = this.layout(width || this.width, height || this.height);\n    // Window modal features\n    this.features = {\n      width: computedWidth,\n      height: computedHeight,\n      top,\n      left,\n      scrollbars: 'yes',\n      resizable: 'yes',\n      status: 'no',\n      toolbar: 'no',\n      location: 'no',\n      copyhistory: 'no',\n      menubar: 'no',\n      directories: 'no'\n    };\n    this.modal = window.open('', '_blank', this.featuresToString());\n    this.swClient = new WebSocket(webSocketUrl);\n    this.swClient.onmessage = message => {\n      this.isProcessingMessage = true;\n      this.handleMessage(message, successHandler, errorHandler);\n      this.isProcessingMessage = false;\n    };\n  }\n  /**\n   * Handles the messages received from the Nango server via WebSocket\n   * @param message - The message event containing data from the server\n   * @param successHandler - The success handler function to be called when a success message is received\n   * @param errorHandler - The error handler function to be called when an error message is received\n   */\n  handleMessage(message, successHandler, errorHandler) {\n    const data = JSON.parse(message.data);\n    switch (data.message_type) {\n      case \"connection_ack\" /* WSMessageType.ConnectionAck */:\n        {\n          if (this.debug) {\n            console.log(debugLogPrefix, 'Connection ack received. Opening modal...');\n          }\n          const wsClientId = data.ws_client_id;\n          this.open(wsClientId);\n          break;\n        }\n      case \"error\" /* WSMessageType.Error */:\n        if (this.debug) {\n          console.log(debugLogPrefix, 'Error received. Rejecting authorization...');\n        }\n        errorHandler(data.error_type, data.error_desc);\n        this.swClient.close();\n        break;\n      case \"success\" /* WSMessageType.Success */:\n        if (this.debug) {\n          console.log(debugLogPrefix, 'Success received. Resolving authorization...');\n        }\n        successHandler(data.provider_config_key, data.connection_id);\n        this.swClient.close();\n        break;\n      default:\n        if (this.debug) {\n          console.log(debugLogPrefix, 'Unknown message type received from Nango server. Ignoring...');\n        }\n        return;\n    }\n  }\n  /**\n   * Calculates the layout dimensions for a modal window based on the expected width and height\n   * @param expectedWidth - The expected width of the modal window\n   * @param expectedHeight - The expected height of the modal window\n   * @returns The layout details including left and top positions, as well as computed width and height\n   */\n  layout(expectedWidth, expectedHeight) {\n    const screenWidth = window.screen.width;\n    const screenHeight = window.screen.height;\n    const left = screenWidth / 2 - expectedWidth / 2;\n    const top = screenHeight / 2 - expectedHeight / 2;\n    const computedWidth = Math.min(expectedWidth, screenWidth);\n    const computedHeight = Math.min(expectedHeight, screenHeight);\n    return {\n      left: Math.max(left, 0),\n      top: Math.max(top, 0),\n      computedWidth,\n      computedHeight\n    };\n  }\n  /**\n   * Opens a modal window with the specified WebSocket client ID\n   * @param wsClientId - The WebSocket client ID to include in the URL\n   * @returns The modal object\n   */\n  open(wsClientId) {\n    this.modal.location = this.url + '&ws_client_id=' + wsClientId;\n    return this.modal;\n  }\n  /**\n   * Converts the features object of this class to a string\n   * @returns The string representation of features\n   */\n  featuresToString() {\n    const features = this.features;\n    const featuresAsString = [];\n    for (const key in features) {\n      featuresAsString.push(key + '=' + features[key]);\n    }\n    return featuresAsString.join(',');\n  }\n}","map":{"version":3,"names":["prodHost","debugLogPrefix","AuthError","Error","type","constructor","message","Nango","hostBaseUrl","websocketsBaseUrl","status","publicKey","debug","win","width","height","tm","config","host","websocketsPath","console","log","slice","AuthorizationStatus","IDLE","baseUrl","URL","websocketUrl","toString","replace","create","providerConfigKey","connectionId","connectionConfig","url","toQueryString","res","fetch","method","headers","ok","errorResponse","json","error","auth","options","credentials","Object","keys","length","_","customAuth","convertCredentialsToConfig","Promise","resolve","reject","successHandler","isPending","BUSY","DONE","errorHandler","errorType","errorDesc","AuthorizationModal","detectClosedAuthWindow","setInterval","modal","window","closed","isProcessingMessage","clearTimeout","CANCELED","params","username","password","apiKey","appStoreCredentials","privateKeyId","issuerId","privateKey","scope","oauth2CCCredentials","client_id","client_secret","connectionConfigWithCredentials","apiKeyCredential","body","JSON","stringify","basicCredentials","appCredentials","oauthCredentials","query","push","param","val","hmac","user_scope","join","encodeURIComponent","oauth_client_id_override","oauth_client_secret_override","authorization_params","undefined","features","swClient","webSocketUrl","left","top","computedWidth","computedHeight","layout","scrollbars","resizable","toolbar","location","copyhistory","menubar","directories","open","featuresToString","WebSocket","onmessage","handleMessage","data","parse","message_type","wsClientId","ws_client_id","error_type","error_desc","close","provider_config_key","connection_id","expectedWidth","expectedHeight","screenWidth","screen","screenHeight","Math","min","max","featuresAsString","key"],"sources":["/Users/jamespatten/Documents/repos/mondata/quickstart-react/node_modules/@nangohq/frontend/dist/index.js"],"sourcesContent":["/*\n * Copyright (c) 2023 Nango, all rights reserved.\n */\nconst prodHost = 'https://api.nango.dev';\nconst debugLogPrefix = 'NANGO DEBUG LOG: ';\nexport class AuthError extends Error {\n    type;\n    constructor(message, type) {\n        super(message);\n        this.type = type;\n    }\n}\nexport default class Nango {\n    hostBaseUrl;\n    websocketsBaseUrl;\n    status;\n    publicKey;\n    debug = false;\n    win = null;\n    width = null;\n    height = null;\n    tm = null;\n    constructor(config) {\n        config.host = config.host || prodHost; // Default to Nango Cloud.\n        config.websocketsPath = config.websocketsPath || '/'; // Default to root path.\n        this.debug = config.debug || false;\n        if (this.debug) {\n            console.log(debugLogPrefix, `Debug mode is enabled.`);\n            console.log(debugLogPrefix, `Using host: ${config.host}.`);\n        }\n        if (config.width) {\n            this.width = config.width;\n        }\n        if (config.height) {\n            this.height = config.height;\n        }\n        this.hostBaseUrl = config.host.slice(-1) === '/' ? config.host.slice(0, -1) : config.host; // Remove trailing slash.\n        this.status = AuthorizationStatus.IDLE;\n        this.publicKey = config.publicKey;\n        if (!config.publicKey) {\n            throw new AuthError('You must specify a public key (cf. documentation).', 'missingPublicKey');\n        }\n        try {\n            const baseUrl = new URL(this.hostBaseUrl);\n            // Build the websockets url based on the host url.\n            // The websockets path is considered relative to the baseUrl, and with the protocol updated\n            const websocketUrl = new URL(config.websocketsPath, baseUrl);\n            this.websocketsBaseUrl = websocketUrl.toString().replace('https://', 'wss://').replace('http://', 'ws://');\n        }\n        catch {\n            throw new AuthError('Invalid URL provided for the Nango host.', 'invalidHostUrl');\n        }\n    }\n    /**\n     * Creates a new unauthenticated connection using the specified provider configuration key and connection ID\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId -  The ID of the connection\n     * @param connectionConfig - Optional. Additional configuration for the connection\n     * @returns A promise that resolves with the authentication result\n     */\n    async create(providerConfigKey, connectionId, connectionConfig) {\n        const url = this.hostBaseUrl + `/unauth/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n        const res = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!res.ok) {\n            const errorResponse = await res.json();\n            throw new AuthError(errorResponse.error, errorResponse.type);\n        }\n        return res.json();\n    }\n    /**\n     * Initiates the authorization process for a connection\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId - The ID of the connection for which to authorize\n     * @param options - Optional. Additional options for authorization\n     * @returns A promise that resolves with the authorization result\n     */\n    auth(providerConfigKey, connectionId, options) {\n        if (options &&\n            'credentials' in options &&\n            (!('oauth_client_id_override' in options.credentials) || !('oauth_client_secret_override' in options.credentials)) &&\n            Object.keys(options.credentials).length > 0) {\n            const credentials = options.credentials;\n            const { credentials: _, ...connectionConfig } = options;\n            return this.customAuth(providerConfigKey, connectionId, this.convertCredentialsToConfig(credentials), connectionConfig);\n        }\n        const url = this.hostBaseUrl + `/oauth/connect/${providerConfigKey}${this.toQueryString(connectionId, options)}`;\n        try {\n            new URL(url);\n        }\n        catch {\n            throw new AuthError('Invalid URL provided for the Nango host.', 'invalidHostUrl');\n        }\n        return new Promise((resolve, reject) => {\n            const successHandler = (providerConfigKey, connectionId, isPending = false) => {\n                if (this.status !== AuthorizationStatus.BUSY) {\n                    return;\n                }\n                this.status = AuthorizationStatus.DONE;\n                return resolve({\n                    providerConfigKey: providerConfigKey,\n                    connectionId: connectionId,\n                    isPending\n                });\n            };\n            const errorHandler = (errorType, errorDesc) => {\n                if (this.status !== AuthorizationStatus.BUSY) {\n                    return;\n                }\n                this.status = AuthorizationStatus.DONE;\n                const error = new AuthError(errorDesc, errorType);\n                return reject(error);\n            };\n            if (this.status === AuthorizationStatus.BUSY) {\n                const error = new AuthError('The authorization window is already opened', 'windowIsOppened');\n                reject(error);\n            }\n            // Save authorization status (for handler)\n            this.status = AuthorizationStatus.BUSY;\n            // Open authorization modal\n            this.win = new AuthorizationModal(this.websocketsBaseUrl, url, successHandler, errorHandler, { width: this.width, height: this.height }, this.debug);\n            if (options?.detectClosedAuthWindow || false) {\n                this.tm = setInterval(() => {\n                    if (!this.win?.modal.window || this.win.modal.window.closed) {\n                        if (this.win?.isProcessingMessage === true) {\n                            // Modal is still processing a web socket message from the server\n                            // We ignore the window being closed for now\n                            return;\n                        }\n                        clearTimeout(this.tm);\n                        this.win = null;\n                        this.status = AuthorizationStatus.CANCELED;\n                        const error = new AuthError('The authorization window was closed before the authorization flow was completed', 'windowClosed');\n                        reject(error);\n                    }\n                }, 500);\n            }\n        });\n    }\n    /**\n     * Converts the provided credentials to a Connection configuration object\n     * @param credentials - The credentials to convert\n     * @returns The connection configuration object\n     */\n    convertCredentialsToConfig(credentials) {\n        const params = {};\n        if ('username' in credentials) {\n            params['username'] = credentials.username || '';\n        }\n        if ('password' in credentials) {\n            params['password'] = credentials.password || '';\n        }\n        if ('apiKey' in credentials) {\n            params['apiKey'] = credentials.apiKey || '';\n        }\n        if ('privateKeyId' in credentials && 'issuerId' in credentials && 'privateKey' in credentials) {\n            const appStoreCredentials = {\n                params: {\n                    privateKeyId: credentials.privateKeyId,\n                    issuerId: credentials.issuerId,\n                    privateKey: credentials.privateKey\n                }\n            };\n            if (credentials.scope) {\n                appStoreCredentials.params['scope'] = credentials.scope;\n            }\n            return appStoreCredentials;\n        }\n        if ('client_id' in credentials && 'client_secret' in credentials) {\n            const oauth2CCCredentials = {\n                client_id: credentials.client_id,\n                client_secret: credentials.client_secret\n            };\n            return { params: oauth2CCCredentials };\n        }\n        return { params };\n    }\n    /**\n     * Performs authorization based on the provided credentials i.e api, basic, appstore and oauth2\n     * @param providerConfigKey - The key identifying the provider configuration on Nango\n     * @param connectionId - The ID of the connection for which to create the custom Authorization\n     * @param connectionConfigWithCredentials - The connection configuration containing the credentials\n     * @param connectionConfig - Optional. Additional connection configuration\n     * @returns A promise that resolves with the authorization result\n     */\n    async customAuth(providerConfigKey, connectionId, connectionConfigWithCredentials, connectionConfig) {\n        const { params: credentials } = connectionConfigWithCredentials;\n        if (!credentials) {\n            throw new AuthError('You must specify credentials.', 'missingCredentials');\n        }\n        if ('apiKey' in credentials) {\n            const apiKeyCredential = credentials;\n            const url = this.hostBaseUrl + `/api-auth/api-key/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n            const res = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(apiKeyCredential)\n            });\n            if (!res.ok) {\n                const errorResponse = await res.json();\n                throw new AuthError(errorResponse.error, errorResponse.type);\n            }\n            return res.json();\n        }\n        if ('username' in credentials || 'password' in credentials) {\n            const basicCredentials = credentials;\n            const url = this.hostBaseUrl + `/api-auth/basic/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n            const res = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(basicCredentials)\n            });\n            if (!res.ok) {\n                const errorResponse = await res.json();\n                throw new AuthError(errorResponse.error, errorResponse.type);\n            }\n            return res.json();\n        }\n        if ('privateKeyId' in credentials && 'issuerId' in credentials && 'privateKey' in credentials) {\n            const appCredentials = credentials;\n            const url = this.hostBaseUrl + `/app-store-auth/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n            const res = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(appCredentials)\n            });\n            if (!res.ok) {\n                const errorResponse = await res.json();\n                throw new AuthError(errorResponse.error, errorResponse.type);\n            }\n            return res.json();\n        }\n        if ('client_id' in credentials && 'client_secret' in credentials) {\n            const oauthCredentials = credentials;\n            const url = this.hostBaseUrl + `/oauth2/auth/${providerConfigKey}${this.toQueryString(connectionId, connectionConfig)}`;\n            const res = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(oauthCredentials)\n            });\n            if (!res.ok) {\n                const errorResponse = await res.json();\n                throw new AuthError(errorResponse.error, errorResponse.type);\n            }\n            return res.json();\n        }\n        return Promise.reject(new Error('Something went wrong with the authorization'));\n    }\n    /**\n     * Converts the connection ID and configuration parameters into a query string\n     * @param connectionId - The ID of the connection for which to generate a query string\n     * @param connectionConfig - Optional. Additional configuration for the connection\n     * @returns The generated query string\n     */\n    toQueryString(connectionId, connectionConfig) {\n        const query = [];\n        if (connectionId) {\n            query.push(`connection_id=${connectionId}`);\n        }\n        query.push(`public_key=${this.publicKey}`);\n        if (connectionConfig) {\n            for (const param in connectionConfig.params) {\n                const val = connectionConfig.params[param];\n                if (typeof val === 'string') {\n                    query.push(`params[${param}]=${val}`);\n                }\n            }\n            if (connectionConfig.hmac) {\n                query.push(`hmac=${connectionConfig.hmac}`);\n            }\n            if (connectionConfig.user_scope) {\n                query.push(`user_scope=${connectionConfig.user_scope.join(',')}`);\n            }\n            if (connectionConfig.credentials) {\n                const credentials = connectionConfig.credentials;\n                if ('oauth_client_id_override' in credentials) {\n                    query.push(`credentials[oauth_client_id_override]=${encodeURIComponent(credentials.oauth_client_id_override)}`);\n                }\n                if ('oauth_client_secret_override' in credentials) {\n                    query.push(`credentials[oauth_client_secret_override]=${encodeURIComponent(credentials.oauth_client_secret_override)}`);\n                }\n            }\n            for (const param in connectionConfig.authorization_params) {\n                const val = connectionConfig.authorization_params[param];\n                if (typeof val === 'string') {\n                    query.push(`authorization_params[${param}]=${val}`);\n                }\n                else if (val === undefined) {\n                    query.push(`authorization_params[${param}]=undefined`);\n                }\n            }\n        }\n        return query.length === 0 ? '' : '?' + query.join('&');\n    }\n}\nvar AuthorizationStatus;\n(function (AuthorizationStatus) {\n    AuthorizationStatus[AuthorizationStatus[\"IDLE\"] = 0] = \"IDLE\";\n    AuthorizationStatus[AuthorizationStatus[\"BUSY\"] = 1] = \"BUSY\";\n    AuthorizationStatus[AuthorizationStatus[\"CANCELED\"] = 2] = \"CANCELED\";\n    AuthorizationStatus[AuthorizationStatus[\"DONE\"] = 3] = \"DONE\";\n})(AuthorizationStatus || (AuthorizationStatus = {}));\n/**\n * AuthorizationModal class\n */\nclass AuthorizationModal {\n    url;\n    features;\n    width = 500;\n    height = 600;\n    modal;\n    swClient;\n    debug;\n    isProcessingMessage = false;\n    constructor(webSocketUrl, url, successHandler, errorHandler, { width, height }, debug) {\n        // Window modal URL\n        this.url = url;\n        this.debug = debug || false;\n        const { left, top, computedWidth, computedHeight } = this.layout(width || this.width, height || this.height);\n        // Window modal features\n        this.features = {\n            width: computedWidth,\n            height: computedHeight,\n            top,\n            left,\n            scrollbars: 'yes',\n            resizable: 'yes',\n            status: 'no',\n            toolbar: 'no',\n            location: 'no',\n            copyhistory: 'no',\n            menubar: 'no',\n            directories: 'no'\n        };\n        this.modal = window.open('', '_blank', this.featuresToString());\n        this.swClient = new WebSocket(webSocketUrl);\n        this.swClient.onmessage = (message) => {\n            this.isProcessingMessage = true;\n            this.handleMessage(message, successHandler, errorHandler);\n            this.isProcessingMessage = false;\n        };\n    }\n    /**\n     * Handles the messages received from the Nango server via WebSocket\n     * @param message - The message event containing data from the server\n     * @param successHandler - The success handler function to be called when a success message is received\n     * @param errorHandler - The error handler function to be called when an error message is received\n     */\n    handleMessage(message, successHandler, errorHandler) {\n        const data = JSON.parse(message.data);\n        switch (data.message_type) {\n            case \"connection_ack\" /* WSMessageType.ConnectionAck */: {\n                if (this.debug) {\n                    console.log(debugLogPrefix, 'Connection ack received. Opening modal...');\n                }\n                const wsClientId = data.ws_client_id;\n                this.open(wsClientId);\n                break;\n            }\n            case \"error\" /* WSMessageType.Error */:\n                if (this.debug) {\n                    console.log(debugLogPrefix, 'Error received. Rejecting authorization...');\n                }\n                errorHandler(data.error_type, data.error_desc);\n                this.swClient.close();\n                break;\n            case \"success\" /* WSMessageType.Success */:\n                if (this.debug) {\n                    console.log(debugLogPrefix, 'Success received. Resolving authorization...');\n                }\n                successHandler(data.provider_config_key, data.connection_id);\n                this.swClient.close();\n                break;\n            default:\n                if (this.debug) {\n                    console.log(debugLogPrefix, 'Unknown message type received from Nango server. Ignoring...');\n                }\n                return;\n        }\n    }\n    /**\n     * Calculates the layout dimensions for a modal window based on the expected width and height\n     * @param expectedWidth - The expected width of the modal window\n     * @param expectedHeight - The expected height of the modal window\n     * @returns The layout details including left and top positions, as well as computed width and height\n     */\n    layout(expectedWidth, expectedHeight) {\n        const screenWidth = window.screen.width;\n        const screenHeight = window.screen.height;\n        const left = screenWidth / 2 - expectedWidth / 2;\n        const top = screenHeight / 2 - expectedHeight / 2;\n        const computedWidth = Math.min(expectedWidth, screenWidth);\n        const computedHeight = Math.min(expectedHeight, screenHeight);\n        return { left: Math.max(left, 0), top: Math.max(top, 0), computedWidth, computedHeight };\n    }\n    /**\n     * Opens a modal window with the specified WebSocket client ID\n     * @param wsClientId - The WebSocket client ID to include in the URL\n     * @returns The modal object\n     */\n    open(wsClientId) {\n        this.modal.location = this.url + '&ws_client_id=' + wsClientId;\n        return this.modal;\n    }\n    /**\n     * Converts the features object of this class to a string\n     * @returns The string representation of features\n     */\n    featuresToString() {\n        const features = this.features;\n        const featuresAsString = [];\n        for (const key in features) {\n            featuresAsString.push(key + '=' + features[key]);\n        }\n        return featuresAsString.join(',');\n    }\n}\n//# sourceMappingURL=index.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
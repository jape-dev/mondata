{"ast":null,"code":"var _jsxFileName = \"/Users/jamespatten/Documents/repos/mondata/src/Screens/Connector.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport \"../App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport { Dropdown, Button } from \"monday-ui-react-core\";\nimport Nango from \"@nangohq/frontend\";\nimport { FacebookService, UsersService, MondayService } from \"../api\";\nimport { FacebookAdsForm } from \"../Components/FacebookAdsForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nexport const Connector = () => {\n  _s();\n  const [connector, setConnector] = useState();\n  const [connected, setConnected] = useState(false);\n  const [user, setUser] = useState();\n  const [accountOptions, setAccountOptions] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState();\n  const [fields, setFields] = useState([]);\n  const [selectedFields, setSelectedFields] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [selectedBoardOption, setSelectedBoardOption] = useState();\n  const [boardColumns, setBoardColumns] = useState([]);\n  const [selectedColumnOption, setSelectedColumnOption] = useState();\n  const [date, setDate] = useState();\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const getIconUrl = imgPath => {\n    return require(`../Static/images/${imgPath}.png`);\n  };\n  useEffect(() => {\n    console.log(loading);\n  }, [loading]);\n  const handleRunClick = () => {\n    setLoading(true);\n    if (user !== null && user !== void 0 && user.monday_token && selectedBoardOption && selectedColumnOption && selectedAccount && date) {\n      MondayService.mondayItems(user.monday_token, selectedBoardOption === null || selectedBoardOption === void 0 ? void 0 : selectedBoardOption.value, selectedColumnOption === null || selectedColumnOption === void 0 ? void 0 : selectedColumnOption.value).then(items => {\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(endDate.getDate() - date.value);\n        const queryData = {\n          monday_items: items,\n          account_id: selectedAccount === null || selectedAccount === void 0 ? void 0 : selectedAccount.value,\n          metrics: selectedFields.map(field => field.value),\n          start_date: startDate.toISOString().split(\"T\")[0],\n          end_date: endDate.toISOString().split(\"T\")[0]\n        };\n        const body = {\n          query: queryData,\n          user: user\n        };\n        FacebookService.facebookFetchData(body).then(data => {\n          if (user.monday_token) {\n            MondayService.mondayAddData(user === null || user === void 0 ? void 0 : user.monday_token, selectedBoardOption.value, data).then(() => {\n              setLoading(false);\n              setSuccess(true);\n            });\n          }\n        });\n      });\n    }\n  };\n  const handleFieldSelect = selectedField => {\n    setSelectedFields(prevSelectedFields => {\n      // Check if the option is already selected\n      if (prevSelectedFields.some(field => field === selectedField)) {\n        // If it is, remove it from the selection\n        return prevSelectedFields.filter(field => field !== selectedField);\n      } else {\n        // If it is not, add it to the selection\n        return [...prevSelectedFields, selectedField];\n      }\n    });\n  };\n  const handleFieldDeselect = deselectedField => {\n    setSelectedFields(prevSelectedFields => {\n      // Check if the option is already selected\n      if (prevSelectedFields.some(field => field === deselectedField)) {\n        // If it is, remove it from the selection\n        return prevSelectedFields.filter(field => field !== deselectedField);\n      } else {\n        // If it is not, return the current selection as is\n        return prevSelectedFields;\n      }\n    });\n  };\n  const options = useMemo(() => [{\n    value: \"facebook\",\n    label: \"Facebook Ads\",\n    leftAvatar: getIconUrl(\"facebook-icon\")\n  }, {\n    value: \"facebook_pages\",\n    label: \"Facebook Posts \",\n    leftAvatar: getIconUrl(\"facebook-icon\")\n  }\n  // {\n  //   value: \"instagram\",\n  //   label: \"Instagram\",\n  //   leftAvatar: getIconUrl(\"instagram-icon\"),\n  // },\n  // {\n  //   value: \"google\",\n  //   label: \"Google Ads\",\n  //   leftAvatar: getIconUrl(\"google-ads-icon\"),\n  // },\n  // {\n  //   value: \"google-analytics\",\n  //   label: \"Google Analytics\",\n  //   leftAvatar: getIconUrl(\"google-analytics-icon\"),\n  // },\n  ], []);\n  const dateOptions = useMemo(() => [{\n    value: 1,\n    label: \"Last 1 Days\"\n  }, {\n    value: 7,\n    label: \"Last 7 Days\"\n  }, {\n    value: 30,\n    label: \"Last 30 Days\"\n  }, {\n    value: 90,\n    label: \"Last 90 Days\"\n  }, {\n    value: 365,\n    label: \"Last 12 Months\"\n  }, {\n    value: 730,\n    label: \"Last 24 Months\"\n  }], []);\n  const typeOptions = useMemo(() => [{\n    value: \"date\",\n    label: \"Date\"\n  }, {\n    value: \"link\",\n    label: \"Link\"\n  }, {\n    value: \"text\",\n    label: \"Text\"\n  }], []);\n  async function getSessionToken() {\n    return (await monday.get(\"sessionToken\")).data;\n  }\n  async function updateUser(connectionId) {\n    const sessionToken = await getSessionToken();\n    const requestBody = {\n      scheme: \"Bearer\",\n      credentials: sessionToken\n    };\n    FacebookService.facebookLogin(connectionId, requestBody).then(user => {\n      setUser(user);\n    });\n  }\n  const nango = new Nango({\n    publicKey: \"7b73b776-3a10-41c0-a5ee-feef16d372d4\"\n  });\n  const connect = () => {\n    if (connector === \"facebook\") {\n      nango.auth(\"facebook\", \"test-connection-id\", {\n        authorization_params: {\n          config_id: \"728465868571401\"\n        }\n      }).then(result => {\n        updateUser(result.connectionId);\n        // save id to the database.\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n  useEffect(() => {\n    const fetchUser = async () => {\n      await getSessionToken().then(sessionToken => {\n        if (sessionToken) {\n          UsersService.usersReadUserByMondaySession(sessionToken).then(user => {\n            console.log(user);\n            setUser(user);\n          });\n        }\n      });\n    };\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    if (connector == \"facebook\" && user !== null && user !== void 0 && user.facebook_token) {\n      setConnected(true);\n    } else {\n      setConnected(false);\n    }\n  }, [connector]);\n  useEffect(() => {\n    if (connected) {\n      if (connector === \"facebook\" && user !== null && user !== void 0 && user.facebook_token) {\n        FacebookService.facebookAdAccounts(user.facebook_token).then(accounts => {\n          const accountOptions = accounts.map(account => ({\n            label: account.label,\n            value: account.value\n          }));\n          setAccountOptions(accountOptions);\n        });\n        FacebookService.facebookFields().then(fields => {\n          const fieldOptions = fields.map(field => ({\n            label: field.label,\n            value: field.value\n          }));\n          setFields(fieldOptions);\n        });\n      }\n    }\n  }, [connected, user]);\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.monday_token) {\n      MondayService.mondayBoards(user.monday_token).then(boards => {\n        const boardOptions = boards.map(board => ({\n          value: board.id,\n          label: board.name\n        }));\n        setBoards(boardOptions);\n      });\n    }\n  }, [user]);\n  useEffect(() => {\n    if (selectedBoardOption && user !== null && user !== void 0 && user.monday_token) {\n      MondayService.mondayBoardColumns(selectedBoardOption.value, user.monday_token).then(columns => {\n        const columnOptions = columns.map(column => ({\n          value: column.id,\n          label: column.title\n        }));\n        setBoardColumns(columnOptions);\n      });\n    }\n  }, [selectedBoardOption]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border-2 border-gray rounded-md p-5 mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-bold text-gray-500 text-sm\",\n        children: \"* Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        placeholder: \"Select an application\",\n        options: options,\n        onOptionSelect: e => setConnector(e.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), connected === false && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => connect(),\n        className: \"mt-2\",\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), connected && accountOptions && user && /*#__PURE__*/_jsxDEV(FacebookAdsForm, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 47\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this);\n};\n_s(Connector, \"Pt2+N6qErOAA78dllnAGgmeox4c=\");\n_c = Connector;\nvar _c;\n$RefreshReg$(_c, \"Connector\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","mondaySdk","Dropdown","Button","Nango","FacebookService","UsersService","MondayService","FacebookAdsForm","jsxDEV","_jsxDEV","monday","Connector","_s","connector","setConnector","connected","setConnected","user","setUser","accountOptions","setAccountOptions","selectedAccount","setSelectedAccount","fields","setFields","selectedFields","setSelectedFields","boards","setBoards","selectedBoardOption","setSelectedBoardOption","boardColumns","setBoardColumns","selectedColumnOption","setSelectedColumnOption","date","setDate","loading","setLoading","success","setSuccess","getIconUrl","imgPath","require","console","log","handleRunClick","monday_token","mondayItems","value","then","items","endDate","Date","startDate","getDate","queryData","monday_items","account_id","metrics","map","field","start_date","toISOString","split","end_date","body","query","facebookFetchData","data","mondayAddData","handleFieldSelect","selectedField","prevSelectedFields","some","filter","handleFieldDeselect","deselectedField","options","label","leftAvatar","dateOptions","typeOptions","getSessionToken","get","updateUser","connectionId","sessionToken","requestBody","scheme","credentials","facebookLogin","nango","publicKey","connect","auth","authorization_params","config_id","result","catch","err","fetchUser","usersReadUserByMondaySession","facebook_token","facebookAdAccounts","accounts","account","facebookFields","fieldOptions","mondayBoards","boardOptions","board","id","name","mondayBoardColumns","columns","columnOptions","column","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onOptionSelect","e","onClick","_c","$RefreshReg$"],"sources":["/Users/jamespatten/Documents/repos/mondata/src/Screens/Connector.tsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport \"../App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport { Dropdown, Button } from \"monday-ui-react-core\";\nimport Nango from \"@nangohq/frontend\";\nimport {\n  FacebookService,\n  HTTPAuthorizationCredentials,\n  User,\n  UsersService,\n  MondayService,\n  QueryData,\n  ColumnData,\n  MondayItem,\n  Body_facebook_fetch_data,\n} from \"../api\";\nimport { FacebookAdsForm } from \"../Components/FacebookAdsForm\";\n\nconst monday = mondaySdk();\n\ninterface Board {\n  id: string;\n  name: string;\n}\n\ninterface Option {\n  value: any;\n  label: string;\n}\n\ninterface BoardColumn {\n  id: string;\n  title: string;\n  type: string;\n}\n\nexport const Connector = () => {\n  const [connector, setConnector] = useState();\n  const [connected, setConnected] = useState(false);\n  const [user, setUser] = useState<User>();\n  const [accountOptions, setAccountOptions] = useState<Option[]>([]);\n  const [selectedAccount, setSelectedAccount] = useState<Option>();\n  const [fields, setFields] = useState<Option[]>([]);\n  const [selectedFields, setSelectedFields] = useState<Option[]>([]);\n  const [boards, setBoards] = useState<Option[]>([]);\n  const [selectedBoardOption, setSelectedBoardOption] = useState<Option>();\n  const [boardColumns, setBoardColumns] = useState<Option[]>([]);\n  const [selectedColumnOption, setSelectedColumnOption] = useState<Option>();\n  const [date, setDate] = useState<Option>();\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  const getIconUrl = (imgPath: string) => {\n    return require(`../Static/images/${imgPath}.png`);\n  };\n\n  useEffect(() => {\n    console.log(loading);\n  }, [loading]);\n\n  const handleRunClick = () => {\n    setLoading(true);\n    if (\n      user?.monday_token &&\n      selectedBoardOption &&\n      selectedColumnOption &&\n      selectedAccount &&\n      date\n    ) {\n      MondayService.mondayItems(\n        user.monday_token,\n        selectedBoardOption?.value,\n        selectedColumnOption?.value\n      ).then((items: MondayItem[]) => {\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setDate(endDate.getDate() - date.value);\n\n        const queryData: QueryData = {\n          monday_items: items,\n          account_id: selectedAccount?.value,\n          metrics: selectedFields.map((field) => field.value),\n          start_date: startDate.toISOString().split(\"T\")[0],\n          end_date: endDate.toISOString().split(\"T\")[0],\n        };\n\n        const body: Body_facebook_fetch_data = {\n          query: queryData,\n          user: user,\n        };\n        FacebookService.facebookFetchData(body).then((data: ColumnData[]) => {\n          if (user.monday_token) {\n            MondayService.mondayAddData(\n              user?.monday_token,\n              selectedBoardOption.value,\n              data\n            ).then(() => {\n              setLoading(false);\n              setSuccess(true);\n            });\n          }\n        });\n      });\n    }\n  };\n\n  const handleFieldSelect = (selectedField: Option) => {\n    setSelectedFields((prevSelectedFields: Option[]) => {\n      // Check if the option is already selected\n      if (prevSelectedFields.some((field: Option) => field === selectedField)) {\n        // If it is, remove it from the selection\n        return prevSelectedFields.filter(\n          (field: Option) => field !== selectedField\n        );\n      } else {\n        // If it is not, add it to the selection\n        return [...prevSelectedFields, selectedField];\n      }\n    });\n  };\n\n  const handleFieldDeselect = (deselectedField: Option) => {\n    setSelectedFields((prevSelectedFields: Option[]) => {\n      // Check if the option is already selected\n      if (\n        prevSelectedFields.some((field: Option) => field === deselectedField)\n      ) {\n        // If it is, remove it from the selection\n        return prevSelectedFields.filter(\n          (field: Option) => field !== deselectedField\n        );\n      } else {\n        // If it is not, return the current selection as is\n        return prevSelectedFields;\n      }\n    });\n  };\n\n  const options = useMemo(\n    () => [\n      {\n        value: \"facebook\",\n        label: \"Facebook Ads\",\n        leftAvatar: getIconUrl(\"facebook-icon\"),\n      },\n      {\n        value: \"facebook_pages\",\n        label: \"Facebook Posts \",\n        leftAvatar: getIconUrl(\"facebook-icon\"),\n      },\n      // {\n      //   value: \"instagram\",\n      //   label: \"Instagram\",\n      //   leftAvatar: getIconUrl(\"instagram-icon\"),\n      // },\n      // {\n      //   value: \"google\",\n      //   label: \"Google Ads\",\n      //   leftAvatar: getIconUrl(\"google-ads-icon\"),\n      // },\n      // {\n      //   value: \"google-analytics\",\n      //   label: \"Google Analytics\",\n      //   leftAvatar: getIconUrl(\"google-analytics-icon\"),\n      // },\n    ],\n    []\n  );\n\n  const dateOptions = useMemo(\n    () => [\n      { value: 1, label: \"Last 1 Days\" },\n      { value: 7, label: \"Last 7 Days\" },\n      { value: 30, label: \"Last 30 Days\" },\n      { value: 90, label: \"Last 90 Days\" },\n      { value: 365, label: \"Last 12 Months\" },\n      { value: 730, label: \"Last 24 Months\" },\n    ],\n    []\n  );\n\n  const typeOptions = useMemo(\n    () => [\n      { value: \"date\", label: \"Date\" },\n      { value: \"link\", label: \"Link\" },\n      { value: \"text\", label: \"Text\" },\n    ],\n    []\n  );\n\n  async function getSessionToken() {\n    return (await monday.get(\"sessionToken\")).data;\n  }\n\n  async function updateUser(connectionId: string) {\n    const sessionToken = await getSessionToken();\n\n    const requestBody: HTTPAuthorizationCredentials = {\n      scheme: \"Bearer\",\n      credentials: sessionToken,\n    };\n\n    FacebookService.facebookLogin(connectionId, requestBody).then(\n      (user: User) => {\n        setUser(user);\n      }\n    );\n  }\n\n  const nango = new Nango({\n    publicKey: \"7b73b776-3a10-41c0-a5ee-feef16d372d4\",\n  });\n\n  const connect = () => {\n    if (connector === \"facebook\") {\n      nango\n        .auth(\"facebook\", \"test-connection-id\", {\n          authorization_params: { config_id: \"728465868571401\" },\n        })\n        .then((result) => {\n          updateUser(result.connectionId);\n          // save id to the database.\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      await getSessionToken().then((sessionToken) => {\n        if (sessionToken) {\n          UsersService.usersReadUserByMondaySession(sessionToken).then(\n            (user: User) => {\n              console.log(user);\n              setUser(user);\n            }\n          );\n        }\n      });\n    };\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    if (connector == \"facebook\" && user?.facebook_token) {\n      setConnected(true);\n    } else {\n      setConnected(false);\n    }\n  }, [connector]);\n\n  useEffect(() => {\n    if (connected) {\n      if (connector === \"facebook\" && user?.facebook_token) {\n        FacebookService.facebookAdAccounts(user.facebook_token).then(\n          (accounts) => {\n            const accountOptions: Option[] = accounts.map((account) => ({\n              label: account.label,\n              value: account.value,\n            }));\n            setAccountOptions(accountOptions);\n          }\n        );\n        FacebookService.facebookFields().then((fields) => {\n          const fieldOptions: Option[] = fields.map((field) => ({\n            label: field.label,\n            value: field.value,\n          }));\n          setFields(fieldOptions);\n        });\n      }\n    }\n  }, [connected, user]);\n\n  useEffect(() => {\n    if (user?.monday_token) {\n      MondayService.mondayBoards(user.monday_token).then((boards: Board[]) => {\n        const boardOptions: Option[] = boards.map((board: Board) => ({\n          value: board.id,\n          label: board.name,\n        }));\n        setBoards(boardOptions);\n      });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (selectedBoardOption && user?.monday_token) {\n      MondayService.mondayBoardColumns(\n        selectedBoardOption.value,\n        user.monday_token\n      ).then((columns: BoardColumn[]) => {\n        const columnOptions: Option[] = columns.map((column: BoardColumn) => ({\n          value: column.id,\n          label: column.title,\n        }));\n        setBoardColumns(columnOptions);\n      });\n    }\n  }, [selectedBoardOption]);\n\n  return (\n    <div className=\"p-2\">\n      <div className=\"border-2 border-gray rounded-md p-5 mb-2\">\n        <p className=\"font-bold text-gray-500 text-sm\">* Application</p>\n        <Dropdown\n          placeholder=\"Select an application\"\n          options={options}\n          onOptionSelect={(e: any) => setConnector(e.value)}\n        />\n        {connected === false && (\n          <Button onClick={() => connect()} className=\"mt-2\">\n            Connect\n          </Button>\n        )}\n      </div>\n      {connected && accountOptions && user && <FacebookAdsForm user={user} />}\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
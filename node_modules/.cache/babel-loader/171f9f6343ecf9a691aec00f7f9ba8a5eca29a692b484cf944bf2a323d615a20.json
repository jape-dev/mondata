{"ast":null,"code":"var _jsxFileName = \"/Users/jamespatten/Documents/repos/mondata/src/Screens/Connector.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport \"../App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport { Dropdown, Button } from \"monday-ui-react-core\";\nimport Nango from \"@nangohq/frontend\";\nimport { FacebookService, UsersService, MondayService } from \"../api\";\nimport { FacebookAdsForm } from \"../Components/FacebookAdsForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nexport const Connector = () => {\n  _s();\n  const [connector, setConnector] = useState();\n  const [connected, setConnected] = useState(false);\n  const [user, setUser] = useState();\n  const [accountOptions, setAccountOptions] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState();\n  const [fields, setFields] = useState([]);\n  const [selectedFields, setSelectedFields] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [selectedBoardOption, setSelectedBoardOption] = useState();\n  const [boardColumns, setBoardColumns] = useState([]);\n  const [selectedColumnOption, setSelectedColumnOption] = useState();\n  const [date, setDate] = useState();\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const getIconUrl = imgPath => {\n    return require(`../Static/images/${imgPath}.png`);\n  };\n  const options = useMemo(() => [{\n    value: \"facebook\",\n    label: \"Facebook Ads\",\n    leftAvatar: getIconUrl(\"facebook-icon\")\n  }, {\n    value: \"facebook_pages\",\n    label: \"Facebook Posts \",\n    leftAvatar: getIconUrl(\"facebook-icon\")\n  }\n  // {\n  //   value: \"instagram\",\n  //   label: \"Instagram\",\n  //   leftAvatar: getIconUrl(\"instagram-icon\"),\n  // },\n  // {\n  //   value: \"google\",\n  //   label: \"Google Ads\",\n  //   leftAvatar: getIconUrl(\"google-ads-icon\"),\n  // },\n  // {\n  //   value: \"google-analytics\",\n  //   label: \"Google Analytics\",\n  //   leftAvatar: getIconUrl(\"google-analytics-icon\"),\n  // },\n  ], []);\n  async function getSessionToken() {\n    return (await monday.get(\"sessionToken\")).data;\n  }\n  async function updateUser(connectionId) {\n    const sessionToken = await getSessionToken();\n    const requestBody = {\n      scheme: \"Bearer\",\n      credentials: sessionToken\n    };\n    FacebookService.facebookLogin(connectionId, requestBody).then(user => {\n      setUser(user);\n    });\n  }\n  const nango = new Nango({\n    publicKey: \"7b73b776-3a10-41c0-a5ee-feef16d372d4\"\n  });\n  const connect = () => {\n    if (connector === \"facebook\") {\n      nango.auth(\"facebook\", \"test-connection-id\", {\n        authorization_params: {\n          config_id: \"728465868571401\"\n        }\n      }).then(result => {\n        updateUser(result.connectionId);\n        // save id to the database.\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n  useEffect(() => {\n    const fetchUser = async () => {\n      await getSessionToken().then(sessionToken => {\n        if (sessionToken) {\n          UsersService.usersReadUserByMondaySession(sessionToken).then(user => {\n            console.log(user);\n            setUser(user);\n          });\n        }\n      });\n    };\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    if (connector == \"facebook\" && user !== null && user !== void 0 && user.facebook_token) {\n      setConnected(true);\n    } else {\n      setConnected(false);\n    }\n  }, [connector]);\n  useEffect(() => {\n    if (connected) {\n      if (connector === \"facebook\" && user !== null && user !== void 0 && user.facebook_token) {\n        FacebookService.facebookAdAccounts(user.facebook_token).then(accounts => {\n          const accountOptions = accounts.map(account => ({\n            label: account.label,\n            value: account.value\n          }));\n          setAccountOptions(accountOptions);\n        });\n        FacebookService.facebookFields().then(fields => {\n          const fieldOptions = fields.map(field => ({\n            label: field.label,\n            value: field.value\n          }));\n          setFields(fieldOptions);\n        });\n      }\n    }\n  }, [connected, user]);\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.monday_token) {\n      MondayService.mondayBoards(user.monday_token).then(boards => {\n        const boardOptions = boards.map(board => ({\n          value: board.id,\n          label: board.name\n        }));\n        setBoards(boardOptions);\n      });\n    }\n  }, [user]);\n  useEffect(() => {\n    if (selectedBoardOption && user !== null && user !== void 0 && user.monday_token) {\n      MondayService.mondayBoardColumns(selectedBoardOption.value, user.monday_token).then(columns => {\n        const columnOptions = columns.map(column => ({\n          value: column.id,\n          label: column.title\n        }));\n        setBoardColumns(columnOptions);\n      });\n    }\n  }, [selectedBoardOption]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border-2 border-gray rounded-md p-5 mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-bold text-gray-500 text-sm\",\n        children: \"* Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        placeholder: \"Select an application\",\n        options: options,\n        onOptionSelect: e => setConnector(e.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), connected === false && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => connect(),\n        className: \"mt-2\",\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), connected && accountOptions && user && /*#__PURE__*/_jsxDEV(FacebookAdsForm, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 47\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(Connector, \"iQqgVDymCwe5Zl2kTx1vja7xA6A=\");\n_c = Connector;\nvar _c;\n$RefreshReg$(_c, \"Connector\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","mondaySdk","Dropdown","Button","Nango","FacebookService","UsersService","MondayService","FacebookAdsForm","jsxDEV","_jsxDEV","monday","Connector","_s","connector","setConnector","connected","setConnected","user","setUser","accountOptions","setAccountOptions","selectedAccount","setSelectedAccount","fields","setFields","selectedFields","setSelectedFields","boards","setBoards","selectedBoardOption","setSelectedBoardOption","boardColumns","setBoardColumns","selectedColumnOption","setSelectedColumnOption","date","setDate","loading","setLoading","success","setSuccess","getIconUrl","imgPath","require","options","value","label","leftAvatar","getSessionToken","get","data","updateUser","connectionId","sessionToken","requestBody","scheme","credentials","facebookLogin","then","nango","publicKey","connect","auth","authorization_params","config_id","result","catch","err","console","log","fetchUser","usersReadUserByMondaySession","facebook_token","facebookAdAccounts","accounts","map","account","facebookFields","fieldOptions","field","monday_token","mondayBoards","boardOptions","board","id","name","mondayBoardColumns","columns","columnOptions","column","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onOptionSelect","e","onClick","_c","$RefreshReg$"],"sources":["/Users/jamespatten/Documents/repos/mondata/src/Screens/Connector.tsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport \"../App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport { Dropdown, Button } from \"monday-ui-react-core\";\nimport Nango from \"@nangohq/frontend\";\nimport {\n  FacebookService,\n  HTTPAuthorizationCredentials,\n  User,\n  UsersService,\n  MondayService,\n  QueryData,\n  ColumnData,\n  MondayItem,\n  Body_facebook_fetch_data,\n} from \"../api\";\nimport { FacebookAdsForm } from \"../Components/FacebookAdsForm\";\n\nconst monday = mondaySdk();\n\ninterface Board {\n  id: string;\n  name: string;\n}\n\ninterface Option {\n  value: any;\n  label: string;\n}\n\ninterface BoardColumn {\n  id: string;\n  title: string;\n  type: string;\n}\n\nexport const Connector = () => {\n  const [connector, setConnector] = useState();\n  const [connected, setConnected] = useState(false);\n  const [user, setUser] = useState<User>();\n  const [accountOptions, setAccountOptions] = useState<Option[]>([]);\n  const [selectedAccount, setSelectedAccount] = useState<Option>();\n  const [fields, setFields] = useState<Option[]>([]);\n  const [selectedFields, setSelectedFields] = useState<Option[]>([]);\n  const [boards, setBoards] = useState<Option[]>([]);\n  const [selectedBoardOption, setSelectedBoardOption] = useState<Option>();\n  const [boardColumns, setBoardColumns] = useState<Option[]>([]);\n  const [selectedColumnOption, setSelectedColumnOption] = useState<Option>();\n  const [date, setDate] = useState<Option>();\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  const getIconUrl = (imgPath: string) => {\n    return require(`../Static/images/${imgPath}.png`);\n  };\n\n  const options = useMemo(\n    () => [\n      {\n        value: \"facebook\",\n        label: \"Facebook Ads\",\n        leftAvatar: getIconUrl(\"facebook-icon\"),\n      },\n      {\n        value: \"facebook_pages\",\n        label: \"Facebook Posts \",\n        leftAvatar: getIconUrl(\"facebook-icon\"),\n      },\n      // {\n      //   value: \"instagram\",\n      //   label: \"Instagram\",\n      //   leftAvatar: getIconUrl(\"instagram-icon\"),\n      // },\n      // {\n      //   value: \"google\",\n      //   label: \"Google Ads\",\n      //   leftAvatar: getIconUrl(\"google-ads-icon\"),\n      // },\n      // {\n      //   value: \"google-analytics\",\n      //   label: \"Google Analytics\",\n      //   leftAvatar: getIconUrl(\"google-analytics-icon\"),\n      // },\n    ],\n    []\n  );\n\n  async function getSessionToken() {\n    return (await monday.get(\"sessionToken\")).data;\n  }\n\n  async function updateUser(connectionId: string) {\n    const sessionToken = await getSessionToken();\n\n    const requestBody: HTTPAuthorizationCredentials = {\n      scheme: \"Bearer\",\n      credentials: sessionToken,\n    };\n\n    FacebookService.facebookLogin(connectionId, requestBody).then(\n      (user: User) => {\n        setUser(user);\n      }\n    );\n  }\n\n  const nango = new Nango({\n    publicKey: \"7b73b776-3a10-41c0-a5ee-feef16d372d4\",\n  });\n\n  const connect = () => {\n    if (connector === \"facebook\") {\n      nango\n        .auth(\"facebook\", \"test-connection-id\", {\n          authorization_params: { config_id: \"728465868571401\" },\n        })\n        .then((result) => {\n          updateUser(result.connectionId);\n          // save id to the database.\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      await getSessionToken().then((sessionToken) => {\n        if (sessionToken) {\n          UsersService.usersReadUserByMondaySession(sessionToken).then(\n            (user: User) => {\n              console.log(user);\n              setUser(user);\n            }\n          );\n        }\n      });\n    };\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    if (connector == \"facebook\" && user?.facebook_token) {\n      setConnected(true);\n    } else {\n      setConnected(false);\n    }\n  }, [connector]);\n\n  useEffect(() => {\n    if (connected) {\n      if (connector === \"facebook\" && user?.facebook_token) {\n        FacebookService.facebookAdAccounts(user.facebook_token).then(\n          (accounts) => {\n            const accountOptions: Option[] = accounts.map((account) => ({\n              label: account.label,\n              value: account.value,\n            }));\n            setAccountOptions(accountOptions);\n          }\n        );\n        FacebookService.facebookFields().then((fields) => {\n          const fieldOptions: Option[] = fields.map((field) => ({\n            label: field.label,\n            value: field.value,\n          }));\n          setFields(fieldOptions);\n        });\n      }\n    }\n  }, [connected, user]);\n\n  useEffect(() => {\n    if (user?.monday_token) {\n      MondayService.mondayBoards(user.monday_token).then((boards: Board[]) => {\n        const boardOptions: Option[] = boards.map((board: Board) => ({\n          value: board.id,\n          label: board.name,\n        }));\n        setBoards(boardOptions);\n      });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (selectedBoardOption && user?.monday_token) {\n      MondayService.mondayBoardColumns(\n        selectedBoardOption.value,\n        user.monday_token\n      ).then((columns: BoardColumn[]) => {\n        const columnOptions: Option[] = columns.map((column: BoardColumn) => ({\n          value: column.id,\n          label: column.title,\n        }));\n        setBoardColumns(columnOptions);\n      });\n    }\n  }, [selectedBoardOption]);\n\n  return (\n    <div className=\"p-2\">\n      <div className=\"border-2 border-gray rounded-md p-5 mb-2\">\n        <p className=\"font-bold text-gray-500 text-sm\">* Application</p>\n        <Dropdown\n          placeholder=\"Select an application\"\n          options={options}\n          onOptionSelect={(e: any) => setConnector(e.value)}\n        />\n        {connected === false && (\n          <Button onClick={() => connect()} className=\"mt-2\">\n            Connect\n          </Button>\n        )}\n      </div>\n      {connected && accountOptions && user && <FacebookAdsForm user={user} />}\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}